from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.menu import get_city_choice_keyboard, get_photosession_type_keyboard, get_main_menu
from config import PHOTOGRAPHER_ID

class Booking(StatesGroup):
    city = State()
    session_type = State()

# –ö–æ–º–∞–Ω–¥–∞: üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é
async def start_booking(message: types.Message):
    await message.answer("üìç –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=get_city_choice_keyboard())
    await Booking.city.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
async def process_city(message: types.Message, state: FSMContext):
    if message.text == "üèô –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å":
        await state.update_data(city="–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å")
    elif message.text == "üåê –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π":
        await message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.")
        return
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())
        return
    else:
        await state.update_data(city=message.text)

    await message.answer("üì∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏:", reply_markup=get_photosession_type_keyboard())
    await Booking.session_type.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Å—ä—ë–º–∫–∏
async def process_type(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await Booking.city.set()
        await message.answer("üìç –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=get_city_choice_keyboard())
        return

    valid_types = ["üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è", "‚ù§Ô∏è Love Story", "üì∑ –†–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è —Å—ä—ë–º–∫–∞"]
    if message.text not in valid_types:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(session_type=message.text)
    data = await state.get_data()
    await state.finish()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É. –û–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=get_main_menu())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É
    msg_to_photographer = (
        "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é</b>\n\n"
        f"üìç –ì–æ—Ä–æ–¥: <b>{data['city']}</b>\n"
        f"üì∑ –¢–∏–ø: <b>{data['session_type']}</b>\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üîó Username: @{message.from_user.username or '–Ω–µ—Ç'}\n"
        f"üÜî ID: <code>{message.from_user.id}</code>"
    )

    await message.bot.send_message(PHOTOGRAPHER_ID, msg_to_photographer, parse_mode="HTML")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_booking, lambda m: m.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é")
    dp.register_message_handler(process_city, state=Booking.city)
    dp.register_message_handler(process_type, state=Booking.session_type)